import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import java.io.File;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.awt.*;
import java.awt.event.*;
import java.security.Key;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Locale;
import javax.swing.*;
import javax.swing.JOptionPane;

//reading file names needs to work
//returning name string to launcher
//merge
//covert from array list to linked list

public class MenuBar extends JFrame{
    public MenuBar() {
        menuBar();
        JFrame sampleWindow = new JFrame("Menu");
        sampleWindow.setSize(1400,700);

        sampleWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        ArrayList<String> pNames = new ArrayList<String>();
        ArrayList<File> pFiles = new ArrayList<File>();
        ArrayList<File> presetNames = new ArrayList<File>();
        File presetFile = new File("Graphics");
        addFiles(presetFile,pFiles);
        if (pFiles.size()>0){
            for(int i = 0; i<pFiles.size();i++){
                pNames.add(pFiles.get(i).toString());

            }
            getPresetName(presetFile,presetNames);
            if(presetNames.size()>0){
                for(int i = 0; i <presetNames.size();i++){
                    pNames.add(presetNames.get(i).toString());
                }
            }
        }
        System.out.println(pNames.size());
        for(int i = 0; i < pNames.size(); i++){
            System.out.println(pNames.get(i));

        }

    }
    private void menuBar (){
        createMenuBar();
        setTitle("Menu");
        setSize(500,300);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }
    private void createMenuBar(){
        ArrayList <String> presetNames = new ArrayList<String >();
        presetNames.add("default");
        presetNames.add("name1");
        presetNames.add("another name");
        JMenuBar menuBar = new JMenuBar();
        JMenu helpMenu = new JMenu("Help");
        JMenuItem about = new JMenuItem("About Oratio");
        about.setToolTipText("About");
        about.setMnemonic(KeyEvent.VK_TAB);
        about.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                popUp();
            }
        });
        JMenu presetMenu = new JMenu("Presets");
        presetMenu.setMnemonic(KeyEvent.VK_TAB);
        for (int i = 0; i<presetNames.size();i++) {
            String names = presetNames.get(i);
            JMenuItem item = new JMenuItem(names);
            item.setMnemonic(KeyEvent.VK_DOWN);
            item.setToolTipText(names+" Preset");
            item.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String name = item.getText();
                    switchPreset(name);
                }
            });
            presetMenu.add(item);
            helpMenu.add(about);
            menuBar.add(presetMenu);
            menuBar.add(helpMenu);
            setJMenuBar(menuBar);
            menuBar.revalidate();
        }
    }

//    private String switchPreset(String name){
//        return name;
//    }

    //test
    private void switchPreset(String name){
        System.out.println(name);
    }
    private void popUp(){
        //makes popup window with introduction
        JFrame dialogWindow = new JFrame("About Oratio");
        dialogWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        dialogWindow.setSize(300,400);
        JOptionPane.showMessageDialog(dialogWindow, "Oratio does this ...");

    }

    private void getPresetName(File file, ArrayList<File> Folders){
        if(file.isDirectory()){
            ArrayList <File> path = new ArrayList<File>(Arrays.asList(file.listFiles()));
            for (int i = 0; i < path.size(); i++) {
                if(path.get(i).isDirectory()){
                    Folders.add(path.get(i));
                }

            }
        }
    }
    private void addFiles(File file, ArrayList <File> files){
        if (file.isDirectory()){
            ArrayList <File> path = new ArrayList<File>(Arrays.asList(file.listFiles()));
            for (int i= 0; i<path.size();i++){
                if(path.get(i).isDirectory()) {
                    addFiles(path.get(i), files);
                }
                if (path.get(i).isFile()){
                    files.add(path.get(i));
                }
            }
            if (file.isFile()){
                files.add(file);
            }
        }
    }


}

